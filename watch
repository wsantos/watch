#!/usr/bin/env python

import os
from fnmatch import fnmatch
from fsevents import Observer, Stream
from optparse import OptionParser

global globalOptions

# Script from http://brettterpstra.com/watch-for-file-changes-and-refresh-your-browser-automatically/
chromeScript = """
    tell application "Google Chrome"
            set windowList to every window
            repeat with aWindow in windowList
                    set tabList to every tab of aWindow
                    repeat with atab in tabList
                            if (URL of atab contains "%s") then
                                    tell atab to reload
                            end if
                    end repeat
            end repeat
    end tell
"""

def callback(event):
    global globalOptions


    if globalOptions.epattern:
        for pattern in globalOptions.epattern.split(','):
            if fnmatch(event.name, str.strip(pattern)):
                print "File Changed: %s, excluded, not refreshing" % event.name
                return

    for pattern in globalOptions.ipattern.split(','):
        if fnmatch(event.name, str.strip(pattern)):
            print "File changed: %s, refresing" % event.name
            os.system("osascript -e '" + ((chromeScript) % globalOptions.url) + "'")
    
    

if __name__ == '__main__':
    global globalOptions
    
    usage = "usage: %prog [options] paths"
    parser = OptionParser(usage=usage, version="%prog 0.1a")
   
    parser.add_option("-i", "--include", dest="ipattern", help="File pattern to monitor, comma separed. ex.: '*.*, *.html'", default = "*")
    parser.add_option("-e", "--exclude", dest="epattern", help="File pattern to exclude from monitor comma separed")
    parser.add_option("-u", "--url_filter", dest="url", help="Refresh tabs contains the pattern")

    (options, args) = parser.parse_args()
    if len(args) < 1:
      parser.error("incorrect number of arguments")

    
    globalOptions = options
    
    try:
        print "Starting..."
        
        observer = Observer()

        stream = Stream(callback, *args, file_events=True)
        observer.schedule(stream)
        observer.start()

        while True:
            input()

    except KeyboardInterrupt, e:
        observer.unschedule(stream)
        observer.stop()
        observer.join()
        print "Exiting..."
